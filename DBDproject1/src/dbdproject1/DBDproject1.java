package dbdproject1;

import java.util.List;
import java.sql.Connection;
import java.util.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Jaahanavee Sikri
 */
public class DBDproject1 extends javax.swing.JFrame {

    /**
     * Creates new form SearchBooks
     */
    private String keyword;
    private String fname, lname, name, ssn, address, city, state, cnum, card_id, bname, addr;
    private int id;
    static Connection conn = null;
    private String isbn, title;

    public DBDproject1() {
        initComponents();
        jScrollPane3.setVisible(false);
        jScrollPane1.setVisible(false);
        jScrollPane2.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(250, 20));
        setSize(new java.awt.Dimension(800, 400));

        jTabbedPane2.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N

        jButton2.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jButton2.setText("SEARCH");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jLabel1.setText("Enter ISBN/ book name/ author name");

        jScrollPane3.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N

        jTable2.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "Book Title", "Authors", "Availability", "Check Out"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(216, 216, 216)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(301, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(317, 317, 317))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 808, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(236, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("SEARCH LIBRARY", jPanel1);

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jLabel2.setText("New Borrower Form");

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jLabel3.setText("First Name:");

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jLabel4.setText("Last Name:");

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jLabel5.setText("SSN:");

        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jLabel6.setText("Address :");

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jLabel7.setText("City:");

        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jLabel8.setText("State:");

        jLabel9.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jLabel9.setText("Contact Number:");

        jButton1.setFont(new java.awt.Font("Century", 1, 11)); // NOI18N
        jButton1.setText("CREATE BORROWER");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(291, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(346, 346, 346))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(352, 352, 352)
                        .addComponent(jLabel2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(328, 328, 328)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(241, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("ADD NEW BORROWER", jPanel2);

        jLabel10.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jLabel10.setText("Search for checked out books");

        jLabel11.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jLabel11.setText("Enter any one of the following:");

        jLabel12.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jLabel12.setText("ISBN:");

        jLabel13.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jLabel13.setText("BORROWER CARD_ID:");

        jLabel14.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jLabel14.setText("BORROWER NAME:");

        jButton3.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jButton3.setText("SEARCH");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Loan_ID", "ISBN", "Card_ID", "Check Out Date", "Due Date", "Check In Date", "Check In"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(313, 313, 313)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 11, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextField9, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                        .addComponent(jTextField10)))
                .addContainerGap(378, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(352, 352, 352)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(395, 395, 395)
                        .addComponent(jButton3))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 684, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField9))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField10))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField11))
                .addGap(32, 32, 32)
                .addComponent(jButton3)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(180, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("CHECK IN BOOKS", jPanel3);

        jButton4.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jButton4.setText("REFRESH FINES TABLE");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Card ID", "Fine Amount", "Paid", "Books Returned", "Pay Fine"
            }
        ));
        jScrollPane2.setViewportView(jTable3);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(383, 383, 383)
                        .addComponent(jButton4))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(150, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(jButton4)
                .addGap(41, 41, 41)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(218, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("FINES", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        isbn = jTextField9.getText();
        card_id = jTextField10.getText();
        name = jTextField11.getText();
        String date_out, date_in, due_date, loan_id;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

        try {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "root123");
            Statement stmt = conn.createStatement();

            stmt.execute("USE Library;");
            String sql;
            PreparedStatement ps;
            ResultSet rs;

            if (isbn.equals("") && card_id.equals("") && name.equals("")) {
                //all fields are empty. one must be filled.
                JOptionPane.showMessageDialog(null, "Please enter information in atmost one field.");
            } else {
                if (!isbn.equals("")) {
                    //search using ISBN
                    sql = "SELECT * FROM book_loans_ WHERE isbn=?";
                    ps = conn.prepareStatement(sql);
                    ps.setString(1,isbn);
                    rs = ps.executeQuery();//should essentially return only one tuple
                } else if (!card_id.equals("")) {
                    //search using CARD_ID
                    sql = "SELECT * FROM book_loans_ WHERE card_id=?";
                    ps = conn.prepareStatement(sql);
                    ps.setString(1,card_id);
                    rs = ps.executeQuery();//can maximum return 3 tuples
                } else {
                    //search using NAME substring
                    sql = "SELECT * FROM book_loans_ WHERE card_id = (SELECT card_id FROM borrower WHERE bname LIKE ?)";
                    ps = conn.prepareStatement(sql);
                    ps.setString(1,"%"+name+"%");
                    rs = ps.executeQuery();//can maximum return 3 tuples
                }
                DefaultTableModel tableM = (DefaultTableModel) jTable1.getModel();
                tableM.setRowCount(0);
                while(rs.next()){
                    loan_id = rs.getString("loan_id");
                    isbn = rs.getString("isbn");
                    card_id = rs.getString("card_id");
                    date_out = rs.getString("date_out");
                    due_date = rs.getString("due_date");
                    date_in  = rs.getString("date_in");
                    Date d_i,curr_d ;
                    if(date_in!=null){
                    d_i = sdf.parse(date_in);
                    curr_d = new Date();
                    if(d_i.compareTo(curr_d)==0 || d_i.compareTo(curr_d)<0){
                        tableM.addRow(new Object[]{loan_id,isbn,card_id,date_out,due_date,date_in,new JButton()});
                        jTable1.getColumn("Check In").setCellRenderer(new ButtonR());
                        jTable1.getColumn("Check In").setCellEditor(new ButtonE(new JCheckBox()));
                    } 
                    }else if(date_in==null){
                        tableM.addRow(new Object[]{loan_id,isbn,card_id,date_out,due_date,date_in,new JButton()});
                        jTable1.getColumn("Check In").setCellRenderer(new ButtonR());
                        jTable1.getColumn("Check In").setCellEditor(new ButtonE(new JCheckBox()));
                    }  
                }
                jScrollPane1.setVisible(true);
                jPanel1.revalidate();
                rs.close();
            }

            conn.close();
        } catch (SQLException se) {
            System.out.println(se.getMessage());
        } catch (ParseException ex) {
            Logger.getLogger(DBDproject1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        fname = jTextField1.getText();
        lname = jTextField3.getText();
        ssn = jTextField4.getText();
        address = jTextField5.getText();
        city = jTextField6.getText();
        state = jTextField7.getText();
        cnum = jTextField8.getText();
        if (jTextField1.getText().equals("") || jTextField5.getText().equals("") || jTextField3.getText().equals("") || jTextField4.getText().equals("") || jTextField6.getText().equals("") || jTextField7.getText().equals("") || jTextField8.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter all the information in the form.");
        } else {
            try {
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "root123");
                Statement stmt = conn.createStatement();

                stmt.execute("USE Library;");
                String sql = "SELECT card_id FROM borrower WHERE ssn LIKE ?";
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, ssn);
                ResultSet rs = ps.executeQuery();

                if (rs.next()) {
                    //entered ssn already exists
                    //display error message
                    JOptionPane.showMessageDialog(null, "Sorry, a user with this SSN already exists.");
                } else {
                    //add new borrower
                    //generating id for new borrower
                    //System.out.println("CREATING NEW USER");
                    sql = "SELECT card_id FROM borrower ORDER BY card_id DESC LIMIT 1";//select the last card_id in the system
                    ps = conn.prepareStatement(sql);
                    rs = ps.executeQuery();
                    while (rs.next()) {
                        id = Integer.parseInt(rs.getString("card_id").substring(4));
                    }
                    id++;
                    card_id = "ID00" + id;
                    bname = fname + " " + lname;
                    addr = address + " " + city + " " + state;
                    sql = "INSERT INTO borrower VALUES (?,?,?,?,?)";
                    ps = conn.prepareStatement(sql);
                    ps.setString(1, card_id);
                    ps.setString(2, ssn);
                    ps.setString(3, bname);
                    ps.setString(4, addr);
                    ps.setString(5, cnum);

                    ps.execute();
                    JOptionPane.showMessageDialog(null, "User " + card_id + " was successfully added to the system.");

                    jTextField1.setText("");
                    jTextField3.setText("");
                    jTextField4.setText("");
                    jTextField5.setText("");
                    jTextField6.setText("");
                    jTextField7.setText("");
                    jTextField8.setText("");
                }
                rs.close();
                conn.close();
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) jTable2.getModel();
        tableModel.setRowCount(0);
        List<String> auth = new ArrayList<String>();
        keyword = jTextField2.getText();
        String avail;//stores true if book is available, false if checked out
        try {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "root123");
            Statement stmt = conn.createStatement();

            stmt.execute("USE Library;");
            String sql = "SELECT * FROM book_ WHERE title LIKE ?";
            String sql2, sql3, sql4, sql5;
            PreparedStatement ps = conn.prepareStatement(sql);
            PreparedStatement ps2,ps3, ps4,ps5;
            ps.setString(1, "%" + keyword + "%");
            ResultSet rs = ps.executeQuery();
            ResultSet rs2,rs3, rs4, rs5;
            
            while (rs.next()) {
                isbn = rs.getString("isbn");
                title = rs.getString("title");
                
                sql2 = "SELECT author_id FROM book_authors_ WHERE isbn LIKE ?";
                ps2 = conn.prepareStatement(sql2);
                ps2.setString(1,isbn);
                rs2 = ps2.executeQuery();
                avail = (checkAvail(isbn)) ? "Yes":"No" ;
                while(rs2.next()){
                    sql3 = "SELECT name FROM authors WHERE author_id = ?";
                    ps3 = conn.prepareStatement(sql3);
                    ps3.setString(1,rs2.getString("author_id"));
                    rs3 = ps3.executeQuery();
                    while(rs3.next()){
                        String name_a = rs3.getString("name");
                        auth.add(name_a);
                    }
                }
                tableModel.addRow(new Object[]{isbn, title, Arrays.toString(auth.toArray()),avail,new JButton()});
                jTable2.getColumn("Check Out").setCellRenderer(new ButtonRenderer());
                jTable2.getColumn("Check Out").setCellEditor(new ButtonEditor(new JCheckBox()));
                auth.clear();
            }

            sql = "SELECT * FROM book_ WHERE isbn LIKE ?";
            ps = conn.prepareStatement(sql);
            
            ps.setString(1, "%" + keyword + "%");
            rs = ps.executeQuery();
            
            while (rs.next()) {
                isbn = rs.getString("isbn");
                title = rs.getString("title");
                
                sql2 = "SELECT author_id FROM book_authors_ WHERE isbn LIKE ?";
                ps2 = conn.prepareStatement(sql2);
                ps2.setString(1,isbn);
                rs2 = ps2.executeQuery();
                avail = (checkAvail(isbn)) ?"Yes" :"No";
                while(rs2.next()){
                    sql3 = "SELECT name FROM authors WHERE author_id = ?";
                    ps3 = conn.prepareStatement(sql3);
                    ps3.setString(1,rs2.getString("author_id"));
                    rs3 = ps3.executeQuery();
                    while(rs3.next()){
                        String name_a = rs3.getString("name");
                        auth.add(name_a);
                    }
                }
                tableModel.addRow(new Object[]{isbn, title, Arrays.toString(auth.toArray()),avail,new JButton()});
                jTable2.getColumn("Check Out").setCellRenderer(new ButtonRenderer());
                jTable2.getColumn("Check Out").setCellEditor(new ButtonEditor(new JCheckBox()));
                auth.clear();
            }
            
            sql = "SELECT * FROM authors WHERE name LIKE ?";
            ps = conn.prepareStatement(sql);
            ps.setString(1, "%" + keyword + "%");
            rs = ps.executeQuery();
            
            while(rs.next()){
                sql2 = "SELECT isbn FROM book_authors_ WHERE author_id = ?";
                ps2 = conn.prepareStatement(sql2);
                ps2.setString(1, rs.getString("author_id"));
                rs2 = ps2.executeQuery();
                
                while(rs2.next()){
                    sql3 = "SELECT * FROM book_ WHERE isbn LIKE ?";
                    ps3 = conn.prepareStatement(sql3);
                    ps3.setString(1, rs2.getString("isbn"));
                    rs3 = ps3.executeQuery();
                    
                    while(rs3.next()){
                        isbn = rs3.getString("isbn");
                        title = rs3.getString("title");
                        
                        sql4 = "SELECT author_id FROM book_authors_ WHERE isbn LIKE ?";
                        ps4 = conn.prepareStatement(sql4);
                        ps4.setString(1,isbn);
                        rs4 = ps4.executeQuery();
                        avail = (checkAvail(isbn)) ? "Yes" : "No";
                        while(rs4.next()){
                            sql5 = "SELECT name FROM authors WHERE author_id = ?";
                            ps5 = conn.prepareStatement(sql5);
                            ps5.setString(1,rs4.getString("author_id"));
                            rs5 = ps5.executeQuery();
                            while(rs5.next()){
                                String name_a = rs5.getString("name");
                                auth.add(name_a);
                            }
                        }
                        tableModel.addRow(new Object[]{isbn, title, Arrays.toString(auth.toArray()),avail, new JButton()});
                        jTable2.getColumn("Check Out").setCellRenderer(new ButtonRenderer());
                        jTable2.getColumn("Check Out").setCellEditor(new ButtonEditor(new JCheckBox()));
                    }
                }
                auth.clear();
            }
            
            jScrollPane3.setVisible(true);
            jPanel1.revalidate();
            rs.close();
            conn.close();
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String date_in, due_date,loan_id, card_id;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        DefaultTableModel tableModel = (DefaultTableModel) jTable3.getModel();
        tableModel.setRowCount(0);
        
        try {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "root123");
            Statement stmt = conn.createStatement();

            stmt.execute("USE Library;");
            String sql = "SELECT * FROM book_loans_ WHERE date_in IS NOT NULL";//books that have been returned
            PreparedStatement ps = conn.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            ResultSet rs_n;
            double fine;
            while (rs.next()) {
                date_in = rs.getString("date_in");
                due_date = rs.getString("due_date");
                loan_id = rs.getString("loan_id");
                
                //select and sum only those fines for each borrower
                //where he/she has returned the books
                sql = "SELECT card_id, sum(fine_amt) FROM book_loans_ NATURAL JOIN fines_ WHERE (paid=0 AND date_in IS NOT NULL) GROUP BY card_id";
                ps = conn.prepareStatement(sql);
                rs_n = ps.executeQuery();
                while(rs_n.next()){//row for this book already exists,just print
                    System.out.println("while in not null");
                    fine = rs_n.getDouble("sum(fine_amt)");
                    card_id = rs_n.getString("card_id");
                    tableModel.addRow(new Object[]{card_id, fine, "No", "Yes", new JButton()});
                    jTable3.getColumn("Pay Fine").setCellRenderer(new BR());
                    jTable3.getColumn("Pay Fine").setCellEditor(new BE(new JCheckBox()));
                }/*else{//add new row in fines table
                    Date di,dd;
                    di = sdf.parse(date_in);
                    dd = sdf.parse(due_date);
                    if(di.compareTo(dd)>0){//fine is applicable
                        long diffInMillies = Math.abs(di.getTime() - dd.getTime());
                        long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
                        fine = diff*0.25;
                        sql = "INSERT INTO fines_(loan_id, fine_amt) VALUES(?,?)";
                        ps = conn.prepareStatement(sql);
                        ps.setString(1,loan_id);
                        ps.setDouble(2, fine);
                        
                        ps.execute();
                        tableModel.addRow(new Object[]{loan_id, fine});
                    }
                }*/
            }
            sql = "SELECT * FROM book_loans_ WHERE date_in IS NULL";//books that have not yet been returned
            ps = conn.prepareStatement(sql);
            rs = ps.executeQuery();
            while(rs.next()){
                
                Date curr_d, dd;
                due_date = rs.getString("due_date");
                loan_id = rs.getString("loan_id");
                
                sql = "SELECT * FROM fines_ WHERE loan_id=?";
                ps = conn.prepareStatement(sql);
                ps.setString(1,loan_id);
                rs_n = ps.executeQuery();
                if(rs_n.next()){//not returned book already in fines table, update fine
                    
                    curr_d = new Date();
                    dd = sdf.parse(due_date);
                    if(dd.compareTo(curr_d)<0){//today's date has passed due date of book
                        long diffInMillies = Math.abs(curr_d.getTime() - dd.getTime());
                        long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
                        fine = diff*0.25;
                        sql = "UPDATE fines_ SET fine_amt = ? WHERE loan_id = ?";
                        ps = conn.prepareStatement(sql);
                        ps.setString(2,loan_id);
                        ps.setDouble(1, fine);
                        
                        ps.execute();
                        //tableModel.addRow(new Object[]{loan_id, fine});
                    }
                }else{//not returned book needs to be added to the fines table
                    curr_d = new Date();
                    dd = sdf.parse(due_date);
                    
                    if(dd.compareTo(curr_d)<0){//today's date has passed due date of book
                        long diffInMillies = Math.abs(curr_d.getTime() - dd.getTime());
                        long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
                        fine = diff*0.25;
                        sql = "INSERT INTO fines_(loan_id, fine_amt) VALUES(?,?)";
                        ps = conn.prepareStatement(sql);
                        ps.setString(1,loan_id);
                        ps.setDouble(2, fine);
                        
                        ps.execute();
                        //tableModel.addRow(new Object[]{loan_id, fine});
                    }
                }
            }
            
            sql = "SELECT card_id, sum(fine_amt) FROM book_loans_ NATURAL JOIN fines_ WHERE (paid=0 AND date_in IS NULL) GROUP BY card_id";
            ps = conn.prepareStatement(sql);
            rs = ps.executeQuery();
            while(rs.next()){
               
                fine = rs.getDouble("sum(fine_amt)");
                card_id = rs.getString("card_id");
                tableModel.addRow(new Object[]{card_id, fine, "No","No", new JButton()});
                jTable3.getColumn("Pay Fine").setCellRenderer(new BR());
                jTable3.getColumn("Pay Fine").setCellEditor(new BE(new JCheckBox()));
            }
            jScrollPane2.setVisible(true);
            jPanel1.revalidate();
            rs.close();
            conn.close();
        }catch(SQLException se){
            System.out.println(se.getMessage());
        } catch (ParseException ex) {
            Logger.getLogger(DBDproject1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    public boolean checkAvail(String co_isbn) {
        boolean avail = true;
        String date_in;
        try {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "root123");
            Statement stmt = conn.createStatement();

            stmt.execute("USE Library;");
            String sql = "SELECT * FROM book_loans_ WHERE isbn LIKE ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, co_isbn);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                //book exists in book loans table
                date_in = rs.getString("date_in");
                //System.out.println(date_in);
                if(date_in == null){
                    //book exists in book loans with no check in date, i.e. checked out
                    avail = false;
                }
            }
            rs.close();
            //conn.close();
        } catch (SQLException se) {
            System.out.println(se.getMessage());
        }
        return avail;
    }

    public void checkOut(String card_ID, String co_isbn, String co_book) {
        //System.out.println(card_ID+" "+co_isbn+" "+co_book);
        int book_loans;
        try {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "root123");
            Statement stmt = conn.createStatement();

            stmt.execute("USE Library;");
            String sql = "SELECT * FROM borrower WHERE card_id LIKE ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, card_ID);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                //card_id exists, need to check how many books have been checked out by this user
                sql = "SELECT COUNT(loan_id) FROM book_loans_ WHERE card_id =?";
                ps = conn.prepareStatement(sql);
                ps.setString(1, card_ID);
                rs = ps.executeQuery();
                if (rs.next()) {
                    book_loans = Integer.parseInt(rs.getString("count(loan_id)"));
                    if (book_loans == 3) {
                        //check out is not allowed
                        JOptionPane.showMessageDialog(null, "User " + card_ID + " already has 3 book loans. Cannot check out");
                    } else {
                        //checkout is allowed
                        sql = "INSERT INTO book_loans_(isbn,card_id,date_out,due_date,date_in) VALUES (?,?,CURDATE(),DATE_ADD(CURDATE(),INTERVAL 14 DAY),NULL)";
                        ps = conn.prepareStatement(sql);
                        ps.setString(1, co_isbn);
                        ps.setString(2, card_ID);

                        ps.execute();
                        JOptionPane.showMessageDialog(null, "User " + card_ID + " has successfully checked out book " + co_book);
                    }
                }
            } else {
                //card_id doesn't exist 
                JOptionPane.showMessageDialog(null, "User " + card_ID + " has doesn't exist in the system");
            }
            rs.close();
            conn.close();
        } catch (SQLException se) {
            System.out.println(se.getMessage());
        }
    }
    
    public void checkIn(String loan_id) throws ParseException{
        try {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "root123");
            Statement stmt = conn.createStatement();

            stmt.execute("USE Library;");
            String sql = "UPDATE book_loans_ SET date_in = CURDATE() WHERE loan_id = ?";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, loan_id);
            
            if(ps.executeUpdate()>0){
                //update was sucessful
                JOptionPane.showMessageDialog(null, "The book has been checked in!");
            }
            
            //checking if book was returned late, adding fine to fines table
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date di;
            Date dd;
            ResultSet rs;
            double fine;
            
            sql = "SELECT * FROM book_loans_ WHERE loan_id = ?";
            ps = conn.prepareStatement(sql);
            ps.setString(1, loan_id);
            rs = ps.executeQuery();
            
            while(rs.next()){
                dd = sdf.parse(rs.getString("due_date"));
                di = sdf.parse(rs.getString("date_in"));
                if(dd.compareTo(di)<0){//fine is applicable
                    long diffInMillies = Math.abs(di.getTime() - dd.getTime());
                        long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
                        fine = diff*0.25;
                        sql = "INSERT INTO fines_(loan_id, fine_amt) VALUES(?,?)";
                        ps = conn.prepareStatement(sql);
                        ps.setString(1,loan_id);
                        ps.setDouble(2, fine);
                        
                        ps.execute();
                }
            }
        }catch(SQLException se){
            System.out.println(se.getMessage());
        }
    }

    public void payFine(String c_id){
        String l_id;
        try {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/", "root", "root123");
            Statement stmt = conn.createStatement();

            stmt.execute("USE Library;");
            //select those book loans which belong to borrower and 
            //books have been returned
            String sql = "SELECT loan_id FROM book_loans_ WHERE card_id = ? AND date_in IS NOT NULL";
            PreparedStatement ps = conn.prepareStatement(sql);
            ps.setString(1, c_id);
            ResultSet rs = ps.executeQuery();
            
            while(rs.next()){
                l_id = rs.getString("loan_id");
                sql = "UPDATE fines_ SET paid=1 where loan_id = ?";
                ps = conn.prepareStatement(sql);
                ps.setString(1, l_id);
                if(ps.executeUpdate()>0){
                    //update was sucessful
                    JOptionPane.showMessageDialog(null, c_id+" has paid fines for returned books!");
                }
            }
            
        }catch(SQLException se){
            System.out.println(se.getMessage());
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DBDproject1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DBDproject1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DBDproject1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DBDproject1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DBDproject1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables

}
